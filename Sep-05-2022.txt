1. functions and recursions.
2. GEC / FEC / call stack.

const Calculator = {
  add: (a,b) => {
    return a+b;
  }
}

console.log(Calculator.add(2,4)); // First Order Function

const Calculator = (sum, num1, num2) => {
  
  console.log(sum(num1, num2) );
  return -1;
}

const Add = (a,b) => {
  return a*b;
}


Calculator(Add,2,4);

var string = {
  length: "",
  upperCase: () {
    //capitl letter,
  },
  lowerCase: () {
    
  },
  trim: (){},
  abc: (){}
}


number => 

var Student = {
  name: "Aman",
  rollNum: 23,
  getMarks: () => {
    return 90;
  },
  getDetails: function () {
    console.log(this.name, " ", this.rollNum);
  }
}

Key:Value pairs separated by comma. 

different ways to access the properties. 
console.log(Student.name);
console.log( Student["name"] );


function printObject(obj) {
  // square brackets while accessing the unknown keys
  for (var key in obj) {
    console.log(key, ":", obj[key]);
  }
}

printObject(Student);

Student.getDetails();

for deletion any key-value pair. 
we have a keyword delete.
delete Student.name;



for in 
It will work for Objects and it only runs on keys of it. 
for (var key in Student) {
  console.log(key, ":", Student[key]);
}

var arr = "aman";

for( var key of arr ) {
  console.log(key);
}


Object Methods
1. Object.entries
2. Object.keys
3. Object.values


console.log(Object.keys(Student));
console.log(Object.values(Student));
console.log(Object.entries(Student));

for (var [a, b] of Object.entries(Student)) {
  console.log(a, ":", b);
}



for (var key in Student) {
  console.log(key, ":", Student[key]);
}

var keys = Object.keys(Student);
var values = Object.values(Student);
for(var i = 0; i < keys.length; i++) {
  // var key = keys[i];
  console.log(keys[i], ":", values[i]);