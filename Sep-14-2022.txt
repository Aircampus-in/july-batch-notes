Question1:- Use two pointer approach. Given a binary array( array contains only O and 1)
we have to sort the array OR we have to separate 0 and 1 like 0 should be in left of the
array and 1 should in right of the array. 

example:- Input = [1,1,0,1,0];
output = [0,0,1,1,1]

1. Approaches. 
  separate 0 and 1. 
  
Approach 1 

function separate0And1(arr) {
  var countOf0 = 0; // O(1)
  for( var index = 0 ; index < arr.length; index++) { // O(arr.length)
    if(arr[index] == 0) {
      countOf0++;
    }
  }
  
  for(var index = 0; index < countOf0; index++) { // O(countOf0)
    arr[index] = 0;
  }
  
  for(var index = countOf0; index < arr.length; index++) { // O(countOf1)
    arr[index] = 1;
  }

  return arr; // O(1)
}

TC
O(1) + O(arr.length) + O(countOf0) + O(countOf1) + O(1);

O(1 + arr.length + countOf1 + countOf0 + 1) ;
O( 2 +  arr.length + arr.length);
O( 2 + 2* arr.length);
O(2*arr.length) => O(n) => n is arr.length;

Approach 2

function sortByTwoPointer(arr) {
  var start = 0 , end = arr.length - 1 ;
  
  
  while( start < end ) {
    
  	while( start < end && arr[start] %2 == 0 ) {
    	start++ ;
  	}
      
  	while( start < end && arr[end] %2 == 1 ) {
    	end-- ;
  	}
      
  	if( start < end ) {
    	swap(arr[start], arr[end]);
    	start++ ;
    	end-- ;
  	}
  }
  
  return arr;
} 

Question:- Given a interger array, we have to separate even and odd numbers. 

// 1. we don't need to maintain the order of input.
// 2. We have to maintain the order of input. 

[23, 45, 6, 8, 19, 12];

[6,8, 12, 23,45,19];

[8, 12, 6, 23, 19, 45]


Approach 3:
function sorting(arr)
{
  var i=-1;
  for(var j=0;j<arr.length;j++)
  {
    if(arr[j]==0)
    {
      i++;
      var temp=arr[i];
      arr[i]=arr[j]
      arr[j]=temp;
    }
  }
  return arr;
}

console.log(separate0And1([1,1,0,1,0]));



Question 2:- Given two objects, check whether both of them are equal or not.
Equal Object means => Both Object have same keys associated with same values.

example:-
Input 1
Obj1 = { a: 23, b: 34, c: 89 } 
Obj2 = { a: 23, b: 34, c: 89 } 

Ouput true;

Input 2
Obj1 = { b: 34, a:{v:"90"}, c: 89 } 
Obj2 = { a: {v:"90"}, b: 34, c: 89 }

Ouput true;

Input 3

Obj1 = { b: 34, a: 23, c: 890 } 
Obj2 = { a: 23, b: 34, c: 89 }

Ouput false;


{ b: 34, a:{v:"90"}, c: 89 }
{ a: {v:"90"}, b: 34, c: 89 }


Object {
  keys are Equal
  associated values are Equal

  value can be Object.
}


Recursion. 

function checkObjectsAreSame(obj1, obj2) {
  var keysOfObj1 = Object.keys(obj1).sort();
  var keysOfObj2 = Object.keys(obj2).sort();
  
  if( keysOfObj2.length != keysOfObj1.length ) {
    return false;
  }
  
  for( var index = 0 ; index < keysOfObj1.length; index++ ) {
    if(keysOfObj1[index] != keysOfObj2[index]) {
      return false;
    }
    
    var value1 = obj1[keysOfObj1[index]];
    var value2 = obj2[keysOfObj2[index]];
    
    if( typeof(value1) != typeof(value2)) {
      return false;
    }
    
    if( typeof(value1) == 'object' && !checkObjectsAreSame(value1, value2)) {
      return false;
    }
    
    if(value1 != value2) {
      return false;
    }
  }
  
  return true;
}

O(number of key value pairs present in all the given object and their
nested object values);


Approach 2:

function deepEquality(obj1 , obj2 ) {
  let key1 = Object.keys(obj1) ;
  let key2 = Object.keys(obj2) ;
 
  if(key1.length !== key2.length ) {
	  return false ;
  }

  for( key of key1 ) {
  	let val1 = obj1[key] ;
  	let val2 = obj2[key] ;
      
  	let areObject = isObject(val1) && isObject(val2) ;
      
  	if( ( areObject && !deepEquality(val1 , val2 ) ) || ( !areObject   && val1 !== val2 ) ) {
  	// If the value of the property are objects
  	// and not equal
  	  return false ;
    }
  }
  return true ;
}

value1 = {v:"90", k: "100"};
value2 = {v:"90", ko: "100"};





---------- SEARCHING ------------
// 1. linear search:- 
// Question:- Given an array find the given value is present or not. / return the index. 
// / return the sum of its adjacent values / return the square of that number